# Project-level configuration.
cmake_minimum_required(VERSION 3.13)

# =========================================================
#  Project‑level configuration  (generated by Flutter, plus
#  Rust‑integration patches  ✱ 2025‑06‑13)
# =========================================================
cmake_minimum_required(VERSION 3.13)

# ---------------------------------------------------------------------------
# 1.  Propagate Flutter build mode (Debug/Release/Profile) to CMake
# ---------------------------------------------------------------------------
if("$ENV{FLUTTER_BUILD_MODE}" STREQUAL "")
  set(FLUTTER_BUILD_MODE Debug)
else()
  set(FLUTTER_BUILD_MODE $ENV{FLUTTER_BUILD_MODE})
endif()
set(CMAKE_BUILD_TYPE "${FLUTTER_BUILD_MODE}" CACHE STRING "" FORCE)

project(runner LANGUAGES CXX)

# ---------------------------------------------------------------------------
# Application metadata
# ---------------------------------------------------------------------------
set(BINARY_NAME "frontend")            # Executable on disk
set(APPLICATION_ID "com.example.frontend")

cmake_policy(SET CMP0063 NEW)          # Modern CMake behaviours
set(CMAKE_INSTALL_RPATH "$ORIGIN/lib") # Locate bundled libs at runtime

# ---------------------------------------------------------------------------
# Cross‑build root (if any)
# ---------------------------------------------------------------------------
if(FLUTTER_TARGET_PLATFORM_SYSROOT)
  set(CMAKE_SYSROOT                ${FLUTTER_TARGET_PLATFORM_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH         ${CMAKE_SYSROOT})
  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
endif()

# ---------------------------------------------------------------------------
# Build‑type default + compile options helper
# ---------------------------------------------------------------------------
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Flutter build mode" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Profile" "Release")
endif()

function(APPLY_STANDARD_SETTINGS TARGET)
  target_compile_features(${TARGET} PUBLIC cxx_std_14)
  target_compile_options(${TARGET} PRIVATE -Wall -Werror)
  target_compile_options(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:-O3>")
  target_compile_definitions(${TARGET} PRIVATE "$<$<NOT:$<CONFIG:Debug>>:NDEBUG>")
endfunction()

# ---------------------------------------------------------------------------
# Flutter rules, third‑party packages, runner sub‑dir
# ---------------------------------------------------------------------------
set(FLUTTER_MANAGED_DIR "${CMAKE_CURRENT_SOURCE_DIR}/flutter")
add_subdirectory(${FLUTTER_MANAGED_DIR})

find_package(PkgConfig REQUIRED)
pkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)

add_subdirectory("runner")

# The Flutter tool must always run
add_dependencies(${BINARY_NAME} flutter_assemble)

# Place the *runnable* binary where nobody tries to launch it directly
set_target_properties(${BINARY_NAME}
  PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/intermediates_do_not_run"
)

include(flutter/generated_plugins.cmake)

# ---------------------------------------------------------------------------
# 2.  Rust cdylib integration – select the correct Cargo profile
# ---------------------------------------------------------------------------
# Map CMake configs to Cargo profiles
string(TOLOWER "${CMAKE_BUILD_TYPE}" _cbuild_lwr)
if(_cbuild_lwr STREQUAL "debug")
  set(_cargo_profile "")              # default dev
else()
  set(_cargo_profile "--release")
endif()

set(_rust_manifest "${CMAKE_SOURCE_DIR}/../../Cargo.toml")

# Path to libshared.so for current config
set(_rust_shared_so
    $<$<CONFIG:Debug>:${CMAKE_SOURCE_DIR}/../../target/debug/libshared.so>
    $<$<NOT:$<CONFIG:Debug>>:${CMAKE_SOURCE_DIR}/../../target/release/libshared.so>)

# Build target
add_custom_target(rust_shared_dylib
  COMMAND cargo build --manifest-path "${_rust_manifest}" ${_cargo_profile} --package shared
  BYPRODUCTS "${_rust_shared_so}"
  WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/../.."     # repo root
  COMMENT "Building Rust cdylib (profile=${CMAKE_BUILD_TYPE})"
)

add_dependencies(${BINARY_NAME} rust_shared_dylib)

# ---------------------------------------------------------------------------
# 3.  Installation rules (kept from template, with Rust lib added)
# ---------------------------------------------------------------------------
set(BUILD_BUNDLE_DIR "${PROJECT_BINARY_DIR}/bundle")
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${BUILD_BUNDLE_DIR}" CACHE PATH "..." FORCE)
endif()

install(CODE "file(REMOVE_RECURSE \"${BUILD_BUNDLE_DIR}/\")" COMPONENT Runtime)

set(INSTALL_BUNDLE_DATA_DIR "${CMAKE_INSTALL_PREFIX}/data")
set(INSTALL_BUNDLE_LIB_DIR  "${CMAKE_INSTALL_PREFIX}/lib")

# ⇢  Rust cdylib
install(FILES "${_rust_shared_so}" DESTINATION "lib" COMPONENT Runtime)

# ⇢  Flutter runner (unchanged template lines)
#install(TARGETS ${BINARY_NAME}
#        RUNTIME DESTINATION "bin"
#        BUNDLE  DESTINATION "."
#        LIBRARY DESTINATION "lib")
install(TARGETS ${BINARY_NAME}
  RUNTIME DESTINATION "bin"
  BUNDLE  DESTINATION "."
  LIBRARY DESTINATION "lib")

install(TARGETS ${BINARY_NAME}
        RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}"
        COMPONENT Runtime)

install(FILES "${FLUTTER_ICU_DATA_FILE}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)
install(FILES "${FLUTTER_LIBRARY}"       DESTINATION "${INSTALL_BUNDLE_LIB_DIR}"  COMPONENT Runtime)

foreach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})
  install(FILES "${bundled_library}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}" COMPONENT Runtime)
endforeach()

set(NATIVE_ASSETS_DIR "${PROJECT_BUILD_DIR}native_assets/linux/")
install(DIRECTORY "${NATIVE_ASSETS_DIR}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}" COMPONENT Runtime)

set(FLUTTER_ASSET_DIR_NAME "flutter_assets")
install(CODE "file(REMOVE_RECURSE \"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\")" COMPONENT Runtime)
install(DIRECTORY "${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}" DESTINATION "${INSTALL_BUNDLE_DATA_DIR}" COMPONENT Runtime)

if(NOT CMAKE_BUILD_TYPE MATCHES "Debug")
  install(FILES "${AOT_LIBRARY}" DESTINATION "${INSTALL_BUNDLE_LIB_DIR}" COMPONENT Runtime)
endif()
