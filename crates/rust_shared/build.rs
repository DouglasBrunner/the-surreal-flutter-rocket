// crates/rust_shared/build.rs

use std::{env, fs, path::PathBuf};

use lib_flutter_rust_bridge_codegen::codegen::{self, Config, MetaConfig};

fn main() {
    println!("cargo:rerun-if-changed=src/api.rs");

    let crate_dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());

    // Define all necessary paths for clarity.
    let dart_output_dir = crate_dir
        .parent().unwrap()
        .parent().unwrap()
        .join("flutter_app/lib/src/gen/rust");
    let rust_output_dir = crate_dir.join("src/gen");
    let rust_output_path = rust_output_dir.join("frb_generated.rs");
    let mod_file_path = rust_output_dir.join("mod.rs");

    let config = Config {
        rust_input: Some("crate::api".to_string()),
        rust_root: Some(crate_dir.to_str().unwrap().to_string()),
        dart_output: Some(dart_output_dir.to_str().unwrap().to_string()),
        rust_output: Some(rust_output_path.to_str().unwrap().to_string()),
        add_mod_to_lib: Some(false),
        ..Default::default()
    };

    // 1. Run the primary code generator.
    // This will create the `src/gen/` directory and `src/gen/frb_generated.rs` within it.
    codegen::generate(config, MetaConfig::default()).expect("FRB codegen failed");

    // 2. NEW: Create the `mod.rs` file to declare the `frb_generated` module.
    // This ensures that `pub mod gen;` in `lib.rs` can find its submodule.
    fs::write(
        &mod_file_path,
        "// This file is automatically generated by build.rs\npub mod frb_generated;\n",
    )
    .expect("Failed to write `mod.rs` for generated code");

    println!("cargo:rustc-env=FRB_DART_OUTPUT_DIR={}", dart_output_dir.to_str().unwrap());
}
